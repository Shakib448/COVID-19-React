{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Charts/Charts.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","App.module.css","components/Charts/Charts.module.css","components/CountryPicker/CountryPicker.module.css","images/image.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","ChangableUrl","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Charts","useState","setDailyData","useEffect","fetchAPI","lineChart","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","image","src","header","alt","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bda83b6c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__26q2r\",\"card\":\"Cards_card__2IQGo\",\"infected\":\"Cards_infected__1FSSP\",\"recovered\":\"Cards_recovered__1RBSG\",\"deaths\":\"Cards_deaths__2IfK9\"};","import React from 'react';\r\nimport {Card, CardContent, Typography, Grid} from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\nimport styles from './Cards.module.css'\r\n\r\nconst Cards = ({\r\n    data: {\r\n        confirmed,\r\n        recovered,\r\n        deaths,\r\n        lastUpdate\r\n    }\r\n}) => {\r\n    if (!confirmed) {\r\n        return \"Loading....\"\r\n    }\r\n    return (\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justify=\"center\">\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            {/* This is count animation */}\r\n                            <CountUp start={0} end={confirmed.value} duration={2.5} separator=\",\"/>\r\n                        </Typography>\r\n                        {/* This methods use for redable time */}\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of active cases COVID - 19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            {/* This is count animation */}\r\n                            <CountUp start={0} end={recovered.value} duration={2.5} separator=\",\"/>\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of recoveries from COVID - 19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            {/* This is count animation */}\r\n                            <CountUp start={0} end={deaths.value} duration={2.5} separator=\",\"/>\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of deaths in COVID - 19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards;","import axios from 'axios';\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async(country) => {\r\n    let ChangableUrl = url;\r\n\r\n    if(country) {\r\n        ChangableUrl = `${url}/countries/${country}`\r\n    }\r\n\r\n    try {\r\n        const {data : {confirmed, recovered, deaths, lastUpdate} } = await axios.get(ChangableUrl);\r\n        \r\n        return {confirmed, recovered, deaths, lastUpdate};\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\n\r\nexport const fetchDailyData = async () =>{\r\n    try {\r\n        const { data } = await axios.get(`${url}/daily`);\r\n\r\n        console.log(data)\r\n\r\n        const modifiedData = data.map((dailyData) => ({\r\n            confirmed : dailyData.confirmed.total,\r\n            deaths : dailyData.deaths.total, \r\n            date : dailyData.reportDate,\r\n        }));\r\n        console.log(modifiedData)\r\n        return modifiedData;\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\n\r\nexport const fetchCountries = async () => {\r\n    try {\r\n        const { data : {countries} } = await axios.get(`${url}/countries`);\r\n\r\n        console.log(countries)\r\n        return countries.map((country) => country.name)\r\n    } catch (error) {\r\n        console.log(error)\r\n        \r\n    }\r\n}\r\n\r\n","\r\nimport React, {useState, useEffect} from 'react';\r\nimport { fetchDailyData } from '../../api';\r\nimport {Line, Bar} from 'react-chartjs-2';\r\n\r\nimport styles from './Charts.module.css';\r\n\r\nconst Charts = ({ data: { confirmed, recovered, deaths }, country }) => {\r\n  const [dailyData, setDailyData] = useState({});\r\n\r\n  useEffect(() =>{\r\n    const fetchAPI = async() =>{\r\n      setDailyData(await fetchDailyData());\r\n    }\r\n    console.log(dailyData)\r\n    fetchAPI();\r\n  },[]);\r\n\r\n  const lineChart = (\r\n    dailyData[0] ? (\r\n      <Line\r\n        data={{\r\n          labels: dailyData.map(({ date }) => date),\r\n          datasets: [{\r\n            data: dailyData.map((data) => data.confirmed),\r\n            label: 'Infected',\r\n            borderColor: '#3333ff',\r\n            fill: true,\r\n          }, {\r\n            data: dailyData.map((data) => data.deaths),\r\n            label: 'Deaths',\r\n            borderColor: 'red',\r\n            backgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n            fill: true,\r\n          },\r\n          ],\r\n        }}\r\n      />\r\n    ) : null\r\n  );\r\n\r\n      const barChart = (\r\n        confirmed ?\r\n        (\r\n          <Bar\r\n            data = {{\r\n              labels : ['Infected', 'Recovered', 'Deaths'],\r\n              datasets : [{\r\n                label : 'People',\r\n                backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\r\n                data: [confirmed.value, recovered.value, deaths.value],\r\n              }]\r\n            }}\r\n            options={{\r\n              legend : {display: false},\r\n              title : { display : true, text: `Current state in ${country}`}\r\n            }}\r\n          />\r\n        ) : null\r\n      )\r\n\r\n  return(\r\n    <div className={styles.container}>\r\n      {country ? barChart : lineChart}\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Charts;","import React, {useEffect, useState} from 'react';\r\nimport {NativeSelect , FormControl} from '@material-ui/core';\r\n\r\nimport styles from './CountryPicker.module.css';\r\n\r\nimport { fetchCountries } from './../../api';\r\n\r\nconst CountryPicker = ({handleCountryChange}) => {\r\n\r\n    const [fetchedCountries, setFetchedCountries] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setFetchedCountries(await fetchCountries())\r\n        }\r\n        fetchAPI();\r\n    }, [setFetchedCountries]);\r\n\r\n    console.log(fetchedCountries)\r\n    \r\n    return(\r\n        <FormControl className={styles.formControl}>\r\n            <NativeSelect defaultValue='' onChange={(e) => handleCountryChange(e.target.value)}>\r\n                <option value=\"\">Global</option>\r\n                {fetchedCountries.map((country, i) => <option key={i} value={country}>{country}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default CountryPicker;","import React, { Component } from 'react'\r\n\r\nimport {Cards, Charts, CountryPicker} from './components';\r\n\r\nimport styles from './App.module.css';\r\n\r\nimport {fetchData} from './api';\r\n\r\nimport header from './images/image.png'\r\n\r\nclass App extends Component {\r\n\r\n    state={\r\n        data : {},\r\n        country : '',\r\n    }\r\n\r\n   async componentDidMount() {\r\n    const fetchedData = await fetchData();\r\n    this.setState({data : fetchedData});\r\n    }\r\n\r\n    handleCountryChange = async (country) => {\r\n    const fetchedData = await fetchData(country);\r\n    this.setState({data : fetchedData, country: country});\r\n    }\r\n    \r\n    render() {\r\n        const {data , country} = this.state;\r\n        return (\r\n            <div className={styles.container}>\r\n                <img className={styles.image} src={header} alt=\"COVID-19\"/>\r\n                <Cards data={data}/>\r\n                <CountryPicker handleCountryChange={this.handleCountryChange}/>\r\n                <Charts data={data} country={country}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom'\r\n\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(<App/> , document.getElementById('root'));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__WSMg5\",\"image\":\"App_image__20KLw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Charts_container__1kUo8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__3BvjC\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}